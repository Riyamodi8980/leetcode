class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        if endWord not in wordList:
            return 0
        
        wordList.append(beginWord)
        nei=collections.defaultdict(list)
        
        for word in wordList:
            for j in range(len(word)):
                pattern = word[:j] + "*" + word[j+1:]
                nei[pattern].append(word)
                
        visit = set([beginWord])
        q = [beginWord]
        res=1
        
        while q:
            size=len(q)
            for i in range(size):
                word=q.pop(0)
                if word == endWord:
                    return res
                
                for j in range(len(word)):
                    pattern= word[:j] + "*" + word[j+1:]
                    for neiword in nei[pattern]:
                        if neiword not in visit:
                            q.append(neiword)
                            visit.add(neiword)
            res+=1
            
        return 0

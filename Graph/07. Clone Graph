"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

#DFS

class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':
        adj_list=[]
        hashmap=dict()
        
        
        def helper(node):
            if node in hashmap:
                return hashmap[node]   
            
            node_clone=Node(node.val)
            hashmap[node]=node_clone
#           
            for neighbour in node.neighbors: 
                node_clone.neighbors.append(helper(neighbour))
            
            return node_clone
        
        return helper(node) if node else None

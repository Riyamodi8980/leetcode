# Diameter of binary Tree is
# 1.longest distance between two leaf nodes
# 2.path does not need to pass via root


#First:

class Solution:
    def diameterOfBinaryTree(self, root: TreeNode) -> int:
        #calculate height
        def height(root: TreeNode):
            if root == None:
                return 0
            left = height(root.left)
            right = height(root.right)
            return 1 + max(left, right)


        
        def FindBinary(root: TreeNode):
            if root == None:
                return 0
            
            h1 = height(root.left)
            h2 = height(root.right)
            op1 = h1+h2
            #left diameter
            op2 = FindBinary(root.left)
            #right diameter
            op3 = FindBinary(root.right)
            return max(op1, op2, op3)

        return FindBinary(root)


#second
class Solution:
    def diameterOfBinaryTree(self, root: TreeNode) -> int:
     
        self.maxi=0
        self.maxpathdown(root,self.maxi)
        return self.maxi
    
    def maxpathdown(self,root,maxi):
        if root==None:
            return 0
        
        leftmax=self.maxpathdown(root.left,self.maxi)
        rightmax=self.maxpathdown(root.right,self.maxi)
        
        self.maxi=max(self.maxi,leftmax+rightmax)
        
        return 1+max(leftmax,rightmax)

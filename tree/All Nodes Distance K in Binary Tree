class Solution:
#TO CREATE DICTIONARY CONTAING NODE:PARENT
    def levelOrder(self, root , parent):
        que=[root]
        while len(que):
            size=len(que)
            for i in range(size):
                node=que.pop(0)
                if node.left:
                    que.append(node.left)
                    parent[node.left]=node
                if node.right:
                    que.append(node.right)
                    parent[node.right]=node


#TO SEE RADIENTLY IN LEFT , RIGHT , PARENT BY INCREASING DISTANCE 1 EACH TIME.
    def radient(self,node,k,parent):
        visited=[node]
        q=[node]
        distance=0
        
        while q :
            size=len(q)
            for i in range(size):
                node=q.pop(0)
                for neighbor in [node.left, node.right, parent[node]]:
                    if neighbor is not None:
                        if neighbor not in visited:
                            q.append(neighbor)
                            visited.append(neighbor)
                    
            distance+=1
            if distance==k:
                break
            
        return q
        
    def distanceK(self, root: TreeNode, target: TreeNode, k: int) -> List[int]:
        if k==0:
            return [target.val]
        
        self.parent={root:None}
        self.levelOrder(root,self.parent)
        
        res_nodes=self.radient(target,k,self.parent)
        
        return_value = []
        for node in res_nodes:
            return_value.append(node.val)
        return return_value           

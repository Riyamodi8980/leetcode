## USING LEVEL ORDER TRAVERSAL
## ASSIGNING VALUE TO EACH NODE STARTING FROM 0
## THIS CAN BE DONE BY INITIALIZING ROOT TO J=0 AND ASSIGN VALUE 2*J TO LEFT AND 2*J+1 TO RIGHT
## NOT ASSGINING VALUE CONTINOUSLY TO AVOID OVERFLOW 
## AT EACH LEVEL TAKING OUT THE FIRST NODE AND LAST NODE AND CALCULATING WIDTH UNTIL QUEUE NOT BECOME EMPTY




# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def widthOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        
        if root==None:
            return result

        # queue
        que=[(root,0)]
        width=0
        while len(que):
            size=len(que)
            mini=que[0][1]   
            maxi=que[len(que)-1][1]

            for i in range(size):
                node,j=que.pop(0)

                if node.left:
                    que.append((node.left,2*j))

                if node.right:
                    que.append((node.right,2*j+1))

            width=max(width,maxi-mini+1)

        return width
        
    

class Solution:
    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        result=[]
        
        def postorder(node):
            if node==None:
                return 
            postorder(node.left)
            postorder(node.right)
            result.append(node.val)
        
        postorder(root)
        return result
       
#################################################################################

def traverse_post_order(node):
    if node is None: 
        return []
    return( traverse_post_order(node.left) +   
           traverse_post_order(node.right) + [node.val])

class Solution:
    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        return traverse_post_order(root)
        

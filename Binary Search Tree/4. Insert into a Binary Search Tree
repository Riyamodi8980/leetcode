# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def insertIntoBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:
        
        node=root
        if node==None:
            return TreeNode(val)
        
        while node:
            if node.val>val:
                if node.left:
                    node=node.left
                else:
                    node.left=TreeNode(val)
                    break
            else:
                if node.right:
                    node=node.right
                else:
                    node.right=TreeNode(val)
                    break
        return root
        
        
##RECURSIVE

    
class Solution:
    def insertIntoBST(self, root: Optional[TreeNode], val: int) -> Optional[TreeNode]:
        if root is None:
            return TreeNode(val) 
        if root.val > val: 
            root.left = self.insertIntoBST(root.left, val)
        else: 
            root.right = self.insertIntoBST(root.right, val)
        return root

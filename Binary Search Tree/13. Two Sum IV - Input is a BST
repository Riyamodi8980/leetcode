###########################################################################################

class Solution:
    def inorder(self,root):
        if root:
            self.inorder(root.left)
            self.ino.append(root.val)
            self.inorder(root.right)
            
    def findTarget(self, root: Optional[TreeNode], k: int) -> bool:
        if root==None:
            return False
        self.ino=[]
        self.inorder(root)
        i=0
        j=len(self.ino)-1
        while i<j:
            if self.ino[i]+self.ino[j]==k:
                return True
            if self.ino[i]+self.ino[j]>k:
                j-=1
            else:
                i+=1
                
        return False 
        
 ##############################################################################################
 
 # Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class BSTIterator:

    def __init__(self, root , isreverse):
        self.stack=[]
        # self.reverse=True-->before
        # self.reverse=False-->next
        self.reverse = isreverse
        
        self.pullAll(root)
        
    def pullAll(self,root):
        while root:
            self.stack.append(root)
            if self.reverse==True:
                root=root.right
            else:
                root=root.left

    def next(self) -> int:
        if len(self.stack)==0:
            return None
        node=self.stack.pop()
        if self.reverse==True:
            self.pullAll(node.left)
        else:
            self.pullAll(node.right)
      

        return node.val
    
    def hasNext(self) -> bool:
        if len(self.stack)==0:
            return False
        else:
            return True

        
class Solution:
      
    def findTarget(self, root: Optional[TreeNode], k: int) -> bool:
        if root==None:
            return False
        
        bstNext=BSTIterator(root,False)
        bstBefore=BSTIterator(root,True)
        
        i=bstNext.next()
        j=bstBefore.next()
        while i<j:
            if i+j==k:
                return True
            if i+j>k:
                j=bstBefore.next()
            else:
                i=bstNext.next()
                
        return False 

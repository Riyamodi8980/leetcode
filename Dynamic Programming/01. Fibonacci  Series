# RECURSSIVE  (EXPONENTIAL)
class Solution:
    def fib(self, n: int) -> int:
        if n<=1:
            return n
        return self.fib(n-1)+ self.fib(n-2)
        
# MEMOIZATION   T.C=O(N)  S.C=O(N)+O(N)

class Solution:
    def fib(self, n: int) -> int:
        memo=dict()
        def f(n):
            if n<=1:
                return n
            if n in memo:
                return memo[n]

            memo[n]=f(n-1)+ f(n-2)
            return memo[n]
        return f(n)
        
        OR

class Solution:
    def fib(self, n: int) -> int:
        memo={0:0,1:1}
        
        def f(n):
            if n in memo:
                return memo[n]

            memo[n]=f(n-1)+ f(n-2)
            return memo[n]
        
        return f(n)
        
        OR 
        
# USING DP ARRAY      

class Solution:
    def fib(self, n: int) -> int:
        F = [-1]*50
        
        def f(n):
            if n<=1:
                return n
            
            if F[n]!=-1:
                return F[n]

            F[n]=f(n-1)+ f(n-2)
            return F[n]
        
        return f(n)
        
# TABULATION  T.C=O(N)  S.C=O(N)

class Solution:
    def fib(self, n: int) -> int:
    
        F = [0]*50 #array to store fibonacci terms

        F[0] = 0
        F[1] = 1
        
        for i in range(2, n+1):
            F[i] = F[i-1] + F[i-2]
        
        return F[n]


# More precise method T.C=O(N)  S.C=O(1)

class Solution:
    def fib(self, n: int) -> int:
        if n <=1:
            return n
        
        prev2 , prev1 = 0 , 1
        
        for i in range(2, n+1):
            cur = prev1 + prev2
            prev2=prev1
            prev1 = cur
           
        return  prev1
